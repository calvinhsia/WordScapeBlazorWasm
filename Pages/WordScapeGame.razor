@page "/wordscape"
@using WordScapeBlazorWasm.Models
@using WordScapeBlazorWasm.Services
@inject WordScapeGameService GameService
@inject GameSettingsService SettingsService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="wordscape-container">
    <div class="game-header">
        <h1>WordScape</h1>
        <div class="game-stats">
            <span>Score: @(_puzzleState?.Score ?? 0)</span>
            <span>Words: @(_puzzleState?.FoundWords.Count ?? 0) / @(_puzzleState?.PossibleWords.Count ?? 0)</span>
        </div>
        <button class="btn btn-secondary" @onclick="ToggleSettings">Settings</button>
        <button class="btn btn-primary" @onclick="NewGame">New Game</button>
    </div>

    @if (_showSettings)
    {
        <div class="settings-panel">
            <h3>Settings</h3>
            <div class="form-group">
                <label for="minLength">Min Word Length:</label>
                <input id="minLength" type="number" @bind="_settings.MinWordLength" min="3" max="8" class="form-control" />
            </div>
            <div class="form-group">
                <label for="maxLength">Max Word Length:</label>
                <input id="maxLength" type="number" @bind="_settings.MaxWordLength" min="4" max="10" class="form-control" />
            </div>
            <button class="btn btn-success" @onclick="SaveSettings">Save Settings</button>
            <button class="btn btn-secondary" @onclick="ToggleSettings">Cancel</button>
        </div>
    }

    @if (_puzzleState is not null)
    {
        <div class="game-area">
            <!-- Crossword Grid -->
            <div class="crossword-grid">
                <h3>Crossword Grid</h3>
                <div class="grid-container" 
                     style="grid-template-columns: repeat(@_puzzleState.LegacyGrid.MaxX, 25px); grid-template-rows: repeat(@_puzzleState.LegacyGrid.MaxY, 25px);">
                    @for (int y = 0; y < _puzzleState.LegacyGrid.MaxY; y++)
                    {
                        @for (int x = 0; x < _puzzleState.LegacyGrid.MaxX; x++)
                        {
                            var cell = _puzzleState.LegacyGrid.Cells.FirstOrDefault(c => c.X == x && c.Y == y);
                            if (cell != null && !cell.IsBlank)
                            {
                                var localX = x; // capture for lambda
                                var localY = y; // capture for lambda
                                var isClicked = _clickedCell.HasValue && _clickedCell.Value.X == x && _clickedCell.Value.Y == y;
                                <div class="grid-cell @(cell.IsRevealed ? "revealed" : "hidden") @(isClicked ? "clicked-highlight" : "")" 
                                     style="grid-column: @(x + 1); grid-row: @(y + 1);"
                                     @onclick="@(() => OnGridCellClick(localX, localY))">
                                    @if (cell.IsRevealed)
                                    {
                                        @cell.Letter.ToString().ToUpper()
                                    }
                                </div>
                            }
                        }
                    }
                </div>
            </div>

            <!-- Found Words List -->
            <div class="found-words">
                <h3>Found Words</h3>
                <div class="words-grid">
                    @foreach (var word in _puzzleState.FoundWords.OrderBy(w => w.Length).ThenBy(w => w))
                    {
                        <div class="found-word">@word</div>
                    }
                </div>
            </div>

            <!-- Circle Letters -->
            <div class="letter-wheel">
                <svg width="300" height="300" viewBox="0 0 300 300">
                    <!-- Circle border -->
                    <circle cx="150" cy="150" r="120" fill="none" stroke="#ccc" stroke-width="2" />
                    
                    <!-- Connection line -->
                    @if (_selectedLetters.Any())
                    {
                        <polyline points="@GetPolylinePoints()" 
                                  fill="none" 
                                  stroke="#007bff" 
                                  stroke-width="3" />
                    }

                    <!-- Letters -->
                    @for (int i = 0; i < _circleLetters.Count; i++)
                    {
                        var letter = _circleLetters[i];
                        var isSelected = _selectedLetters.Contains(i);
                        var index = i; // capture for lambda
                        
                        <g class="letter-container @(isSelected ? "selected" : "")"
                           @onmousedown="@(() => StartSelection(index))"
                           @onmouseover="@(() => ContinueSelection(index))"
                           @onmouseup="@(() => EndSelection())"
                           @ontouchstart="@(() => StartSelection(index))"
                           @ontouchmove="@((e) => HandleTouchMove(e, index))"
                           @ontouchend="@(() => EndSelection())">>
                            
                            <circle cx="@letter.X" 
                                    cy="@letter.Y" 
                                    r="25" 
                                    fill="@(isSelected ? "#007bff" : "#f8f9fa")" 
                                    stroke="@(isSelected ? "#0056b3" : "#dee2e6")" 
                                    stroke-width="2" />
                            
                            <text x="@letter.X" 
                                  y="@(letter.Y + 5)" 
                                  text-anchor="middle" 
                                  font-family="Arial, sans-serif" 
                                  font-size="20" 
                                  font-weight="bold" 
                                  fill="@(isSelected ? "white" : "black")">
                                @letter.Letter
                            </text>
                        </g>
                    }
                </svg>
            </div>

            <!-- Current Word -->
            <div class="current-word">
                <h3>Current Word: @_currentWord</h3>
                <button class="btn btn-warning" @onclick="ClearSelection">Clear</button>
            </div>

            @if (!string.IsNullOrEmpty(_message))
            {
                <div class="alert alert-info">@_message</div>
            }
        </div>

        @if (_puzzleState.IsComplete)
        {
            <div class="alert alert-success">
                <h3>Congratulations!</h3>
                <p>You found all @_puzzleState.PossibleWords.Count words!</p>
                <p>Final Score: @_puzzleState.Score</p>
            </div>
        }
    }
    else if (_isLoading)
    {
        <div class="loading">
            <p>Generating puzzle...</p>
        </div>
    }
</div>

@code {
    private PuzzleState? _puzzleState;
    private GameSettings _settings = new();
    private bool _showSettings = false;
    private bool _isLoading = false;
    private string _message = "";
    private string _currentWord = "";
    
    private List<CircleLetter> _circleLetters = new();
    private List<int> _selectedLetters = new();
    private bool _isSelecting = false;
    private string? _temporarilyRevealedWord = null;
    private System.Threading.Timer? _hideTimer;
    private (int X, int Y)? _clickedCell = null;
    private System.Threading.Timer? _clickHighlightTimer;

    protected override async Task OnInitializedAsync()
    {
        _settings = await SettingsService.LoadSettingsAsync();
        await NewGame();
    }

    private async Task NewGame()
    {
        _isLoading = true;
        _message = "";
        _puzzleState = null;
        _selectedLetters.Clear();
        _currentWord = "";
        _temporarilyRevealedWord = null;
        _hideTimer?.Dispose();
        _hideTimer = null;
        StateHasChanged();

        try
        {
            _puzzleState = await GameService.GeneratePuzzleAsync(_settings);
            
            if (_puzzleState != null)
            {
                CreateCircleLetters();
                _message = $"New puzzle created! Target: {_puzzleState.TargetWord}, Words to find: {_puzzleState.PossibleWords.Count}";
                
                // Clear message after 3 seconds
                _ = Task.Delay(3000).ContinueWith(_ => 
                {
                    if (_message.Contains("New puzzle created"))
                        _message = "";
                    InvokeAsync(StateHasChanged);
                });
            }
            else
            {
                _message = "Failed to generate puzzle - puzzle state is null";
            }
        }
        catch (Exception ex)
        {
            _message = $"Error generating puzzle: {ex.Message}";
            // Log more details for debugging
            Console.WriteLine($"NewGame Error: {ex}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void CreateCircleLetters()
    {
        if (_puzzleState is null) return;

        _circleLetters.Clear();
        var letters = _puzzleState.CircleLetters;
        var radius = 100.0;
        var centerX = 150.0;
        var centerY = 150.0;

        for (int i = 0; i < letters.Count; i++)
        {
            var angle = (2 * Math.PI * i) / letters.Count - (Math.PI / 2); // Start at top
            var x = centerX + radius * Math.Cos(angle);
            var y = centerY + radius * Math.Sin(angle);

            _circleLetters.Add(new CircleLetter
            {
                Letter = letters[i],
                X = x,
                Y = y,
                Index = i
            });
        }
    }

    private void StartSelection(int index)
    {
        _selectedLetters.Clear();
        _selectedLetters.Add(index);
        _isSelecting = true;
        UpdateCurrentWord();
    }

    private void ContinueSelection(int index)
    {
        if (!_isSelecting) return;
        
        if (!_selectedLetters.Contains(index))
        {
            _selectedLetters.Add(index);
            UpdateCurrentWord();
        }
    }

    private void EndSelection()
    {
        _isSelecting = false;
        
        // Automatically submit the word when selection ends
        if (!string.IsNullOrEmpty(_currentWord))
        {
            SubmitWord();
        }
    }

    private void HandleTouchMove(TouchEventArgs e, int index)
    {
        if (!_isSelecting) return;
        
        // For touch events, we need to determine which letter the touch is over
        // This is a simplified approach - in a production app you might want more precise touch handling
        ContinueSelection(index);
    }

    private void UpdateCurrentWord()
    {
        _currentWord = string.Join("", _selectedLetters.Select(i => _circleLetters[i].Letter));
    }

    private void ClearSelection()
    {
        _selectedLetters.Clear();
        _currentWord = "";
        _isSelecting = false;
    }

    private void SubmitWord()
    {
        if (string.IsNullOrEmpty(_currentWord) || _puzzleState is null) return;

        if (GameService.TryAddWord(_currentWord, _puzzleState))
        {
            _message = $"Great! You found '{_currentWord}'!";
        }
        else if (_puzzleState.FoundWords.Contains(_currentWord))
        {
            _message = $"You already found '{_currentWord}'.";
        }
        else if (!GameService.IsValidGuess(_currentWord, _puzzleState))
        {
            _message = $"'{_currentWord}' is not a valid word or cannot be formed from the available letters.";
        }
        else
        {
            _message = $"'{_currentWord}' is not one of the target words for this puzzle.";
        }

        ClearSelection();
        StateHasChanged();

        // Clear message after 3 seconds
        _ = Task.Delay(3000).ContinueWith(_ => 
        {
            _message = "";
            InvokeAsync(StateHasChanged);
        });
    }

    private string GetPolylinePoints()
    {
        if (!_selectedLetters.Any()) return "";
        
        var points = _selectedLetters.Select(i => $"{_circleLetters[i].X},{_circleLetters[i].Y}");
        return string.Join(" ", points);
    }

    private void ToggleSettings()
    {
        _showSettings = !_showSettings;
    }

    private async Task SaveSettings()
    {
        // Validate settings
        if (_settings.MinWordLength >= _settings.MaxWordLength)
        {
            _settings.MinWordLength = _settings.MaxWordLength - 1;
        }

        if (_settings.MinWordLength < 3) _settings.MinWordLength = 3;
        if (_settings.MaxWordLength > 10) _settings.MaxWordLength = 10;

        await SettingsService.SaveSettingsAsync(_settings);
        _showSettings = false;
        _message = "Settings saved! Click 'New Game' to apply changes.";
        
        _ = Task.Delay(3000).ContinueWith(_ => 
        {
            _message = "";
            InvokeAsync(StateHasChanged);
        });
    }

    private void OnGridCellClick(int x, int y)
    {
        // Highlight the clicked cell
        _clickedCell = (x, y);
        
        // Cancel existing highlight timer
        _clickHighlightTimer?.Dispose();
        
        // Set timer to remove highlight after 300ms
        _clickHighlightTimer = new System.Threading.Timer(async _ =>
        {
            _clickedCell = null;
            await InvokeAsync(StateHasChanged);
        }, null, 300, Timeout.Infinite);

        // First, let's just test if the click is working at all
        _message = $"Clicked cell at ({x}, {y})";
        StateHasChanged();
        
        if (_puzzleState == null) 
        {
            _message = "❌ Puzzle state is null";
            StateHasChanged();
            return;
        }

        // Find the word at this position that hasn't been found yet
        var wordAtPosition = GameService.GetWordAtPosition(x, y, _puzzleState);
        
        if (!string.IsNullOrEmpty(wordAtPosition))
        {
            _message = $"🔍 Revealing word: '{wordAtPosition}' at ({x}, {y})";
        }
        else
        {
            _message = $"❌ No word found at ({x}, {y})";
        }
        
        if (!string.IsNullOrEmpty(wordAtPosition) && !_puzzleState.FoundWords.Contains(wordAtPosition))
        {            
            // Hide any previously revealed word
            if (!string.IsNullOrEmpty(_temporarilyRevealedWord))
            {
                GameService.HideWord(_temporarilyRevealedWord, _puzzleState);
            }
            
            // Reveal the new word
            GameService.TemporarilyRevealWord(wordAtPosition, _puzzleState);
            _temporarilyRevealedWord = wordAtPosition;
            
            // Cancel existing timer
            _hideTimer?.Dispose();
            
            // Set timer to hide the word after 2 seconds
            _hideTimer = new System.Threading.Timer(async _ =>
            {
                if (_temporarilyRevealedWord == wordAtPosition)
                {
                    GameService.HideWord(_temporarilyRevealedWord, _puzzleState);
                    _temporarilyRevealedWord = null;
                    await InvokeAsync(StateHasChanged);
                }
            }, null, 2000, Timeout.Infinite);
            
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _hideTimer?.Dispose();
        _clickHighlightTimer?.Dispose();
    }
}
